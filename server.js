const express = require("express");
const app = express();

const path = require("path");
const bodyParser = require('body-parser');
const exphbs = require('express-handlebars');
var nodemailer = require('nodemailer');
var mongoose = require("mongoose");
var bcrypt = require('bcryptjs');
const { isUndefined } = require("util");

const HTTP_PORT = process.env.PORT || 8080;

app.use(bodyParser.urlencoded({ extended: true }));
app.engine('.hbs', exphbs({ extname: '.hbs' }));
app.set('view engine', '.hbs');

var transporter = nodemailer.createTransport({
  host: "smtp.mailtrap.io",
  port: 2525,
  auth: {
    user: "ac110aa0de2962", //generated by Mailtrap
    pass: "fecbd95e009b93" //generated by Mailtrap
  }
});


// mongodb connection and code
var Schema = mongoose.Schema;
mongoose.connect("mongodb+srv://dbUser:4755@senecaweb.ccrea.mongodb.net/web322_assignment?retryWrites=true&w=majority");
var userSchema = new Schema({
  "email": {
    type: String,
    unique: true
  },
  "firstName": String,
  "lastName": String,
  "password": String,
  "birthdate": Date  
});
var User = mongoose.model("users", userSchema);

// call this function after the http server starts listening for requests
function onHttpStart() {
  console.log("Express http server listening on: " + HTTP_PORT);
}

app.use(express.static(path.join(__dirname, 'public')));

// setup a 'route' to listen on the default url path (http://localhost)
app.get("/", function(req,res){
    res.sendFile(path.join(__dirname, 'views', 'index.html'));
});

app.get("/rooms", function(req,res){
    res.sendFile(path.join(__dirname, 'views', 'roomListing.html'));
});

app.get("/signup", function(req,res){
    res.sendFile(path.join(__dirname, 'views', 'signup.html'));
});
  
// setup http server to listen on HTTP_PORT
app.listen(HTTP_PORT, onHttpStart);

// Respond to the client with data
app.post("/signup-submit", (req, res) => {
  var signupData = req.body;

  // checking if user exist in db
  User.find({ email: signupData.email })
  .exec()
  .then((user) => {
    if(user === undefined || user.length == 0) {
      console.log("No user could be found");
      
      
      // use salt for password encryption
      var salt = bcrypt.genSaltSync(10);

      // envrypting the password
      var hash = bcrypt.hashSync(signupData.password, salt);
      
      // To check a password
      // Load hash from your password DB.
      // bcrypt.compareSync("B4c0/\/", hash); // true
    

      // creating model for db insert
      var newUser = new User({
        "email": signupData.email,
        "firstName": signupData.firstname,
        "lastName": signupData.lastname,
        "password": hash,
        "birthdate": new Date(signupData.date)
      });

      // save the user
      newUser.save((err) => {
        if(err) {
          console.log(`There was an error saving the user : ${err}`);
          var errormessage = "Sorry something went wrong."
          res.render('error_dashboard', {
            error: errormessage,
            layout: false 
          }); 
        } 
        else {
          console.log("The user was saved to the users collection");

          // code to mail confirmation of signup
          var mailOptions = {
            from: 'rahmanshamima328@gmail.com',
            to: signupData.email,
            subject: 'Signup confirmation',
            text: 'Welcome...Thank you for signing up ' + signupData.firstname + ' ' + signupData.lastname +'.'
          };
          transporter.sendMail(mailOptions, function(error, info){
            if (error) {
              console.log(error);
            } 
            else {
              console.log('Email sent: ' + info.response);
            }
          });

          // forward the user to a dashboard
          res.render('dashboard', {
            data: signupData,
            layout: false 
          }); 
        }
      });

    } 
    else {
      console.log("user already exists.");
      console.log(user);
      var errormessage = "This email: " + user[0].email + " already exists.";
      res.render('error_dashboard', {
        error: errormessage,
        layout: false 
      }); 
    }
  })
  .catch((err) => {
    console.log(`There was an error: ${err}`);
    var errormessage = "Sorry something went wrong."
    res.render('error_dashboard', {
      error: errormessage,
      layout: false 
    }); 
  });
});
